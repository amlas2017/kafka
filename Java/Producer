---> Les producers n’envoient pas les messages un à un vers kafka, mais envoient des batchs de messages vers les différents brokers leaders de chaque partition. 
     Quand le producer effectue un send, le message n’est donc pas immédiatement transmis sur le réseau mais accumulé dans un buffer interne. 
     Les batchs sont envoyés dès que l’une des deux conditions suivantes se remplit : 
           *** soit le timer démarré à la création du batch expire  ---->   linger.ms est le temps minimum que le producer va attendre avant d’envoyer un batch.
           *** soit le batch dépasse une certaine taille            ---->   batch.size paramètre la taille maximum d’un batch avant envoi.



---> Stratégies de partitionnement en Kafka: https://www.youtube.com/watch?v=rDfkuBufXm8&list=PLlFvk4v0wHXCpAcGZZnHs3C9RE5MvZM-9&index=6
    1) Round-roubin
    2) Clé de hash
    3) Statique (Le producer choisit la partition)
    4) Personnalisée     -----> Interface Partionner    
/************************************************************************************************************************************************************/

---> Diferents constructors for ProducerRecord
-- ProducerRecord(String topic, Integer partition, K key, V value) ----->   Creates a record to be sent to a specified topic and partition
-- ProducerRecord(String topic, V value)     ----->   Create a record with no key

/**************************************************************************************************************************************************************/

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

import java.util.Properties;
import java.util.concurrent.Future;

public class DemoProducer {
    public static void main(String[] args) {

        Properties producerProps = new Properties();  ///  The Properties class extends Hashtable and thus does not define a guaranteed sort order
        producerProps.put("bootstrap.servers", "poste3:9092");
        producerProps.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        producerProps.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        producerProps.put("acks", "all");
        producerProps.put("retries", 1);
        producerProps.put("batch.size", 20000);
        producerProps.put("linger.ms", 1);    //  linger.ms définit le temps minimum que le producer va attendre avant d’envoyer un batch. Cette propriété laisse donc le
                                              //  temps aux messages de s’accumuler côté producer avant envoi, pour limiter le nombre d’appels réseau vers le broker et 
                                              //  gagner en performance globale. Tant que la durée définie dans linger.ms ne s’est pas écoulée, le producer n’enverra pas 
                                              //  le batch, à condition que le batch ne dépasse pas la taille maximale autorisée (voir batch.size ci-dessous).
        producerProps.put("buffer.memory", 24568545);
        
        /* *******************************************************************************************************************************
        properties.setProperty(ProducerConfig.ACKS_CONFIG, "all"); // strongest producing guarantee
        properties.setProperty(ProducerConfig.RETRIES_CONFIG, "3");
        properties.setProperty(ProducerConfig.LINGER_MS_CONFIG, "1");
        
        // leverage idempotent producer from Kafka 0.11 !
        properties.setProperty(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, "true"); // ensure we don't push duplicates
         ******************************************************************************************************************************** */      
/*      Le partitioner par défaut gère deux cas: 
    --->  Si la clé du message est null, alors le sticky partitionner est utilisé.
    --->  Sinon, on répartit les messages par partition avec la formule suivante: hash(clé) % (modulo) nombre de partitions.                   
   ************************************************************************************************************************************** */
        
        
        
        KafkaProducer<String, String> producer = new KafkaProducer<String, String>(producerProps);

        for (int i = 0; i < 250; i++) {
            ProducerRecord data = new ProducerRecord<String, String>("afka-topic", "Hello this is record " + i/10);
            Future<RecordMetadata> recordMetadata = producer.send(data);
        }
        producer.close();
    }
}
=====================================================================================================================================================================
How to create a Multithreaded Producer in Java   ------->   https://www.learningjournal.guru/article/kafka/how-to-create-a-multithreaded-kafka-producer-in-java/
=====================================================================================================================================================================

  Producer<String, String> producer = new KafkaProducer<>(props);
        ProducerRecord<String, String> record = new ProducerRecord<>(topicName, key, value);

        try {
            RecordMetadata metadata = producer.send(record).get();  ///  <--------- .get()   ici
            System.out.println("Message is sent to Partition no " + metadata.partition() + " and offset " + metadata.offset());
            System.out.println("SynchronousProducer Completed with success.");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("SynchronousProducer failed with an exception");
        } finally {
            producer.close();
        }


