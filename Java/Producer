import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

import java.util.Properties;
import java.util.concurrent.Future;

public class DemoProducer {
    public static void main(String[] args) {

        Properties producerProps = new Properties();  ///  The Properties class extends Hashtable and thus does not define a guaranteed sort order
        producerProps.put("bootstrap.servers", "poste3:9092");
        producerProps.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        producerProps.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        producerProps.put("acks", "all");
        producerProps.put("retries", 1);
        producerProps.put("batch.size", 20000);
        producerProps.put("linger.ms", 1);
        producerProps.put("buffer.memory", 24568545);
        
        /* *******************************************************************************************************************************
        properties.setProperty(ProducerConfig.ACKS_CONFIG, "all"); // strongest producing guarantee
        properties.setProperty(ProducerConfig.RETRIES_CONFIG, "3");
        properties.setProperty(ProducerConfig.LINGER_MS_CONFIG, "1");
        
        // leverage idempotent producer from Kafka 0.11 !
        properties.setProperty(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, "true"); // ensure we don't push duplicates
         ******************************************************************************************************************************** */      
        
        
        
        
        KafkaProducer<String, String> producer = new KafkaProducer<String, String>(producerProps);

        for (int i = 0; i < 250; i++) {
            ProducerRecord data = new ProducerRecord<String, String>("afka-topic", "Hello this is record " + i/10);
            Future<RecordMetadata> recordMetadata = producer.send(data);
        }
        producer.close();
    }
}
