// Notes cours -------> https://blog.engineering.publicissapient.fr/2015/02/24/introduction-et-demystification-de-zookeeper/
// Fonctionnalités de Zookeeper: Naming Service, la gestion de configuration, de la synchronisation, Leader Election...

// Fonctionnement de Zookeeper:
Il fonctionne en fournissant un espace mémoire partagé par toutes les instances d’un même ensemble de serveurs Zookeeper. 
Cet espace mémoire est hiérarchique, à la manière d’un FileSystem composé de répertoires et de fichiers à la différence que, 
dans le cas de Zookeeper, on ne parle pas de répertoires et de fichiers mais de nœuds. Chaque nœud s’appelle un ZNode.
Lorsque l’on démarre une instance Zookeeper, la hiérarchie de nœuds est vide et nous n’avons alors qu’un nœud racine qui,
à l’instar des systèmes fichiers, se nomme « / ».

// Bref:
- une instance Zookeeper offre un espace mémoire hiérarchique ;
- plusieurs instances Zookeeper répliquées se nomment un ensemble ;
- un leader est élu dans l’ensemble Zookeeper, c’est lui qui enregistre les opérations, les transmet aux autres membres puis 
  considère l’opération valide lorsque le quorum est atteint ;
- au sein d’un ensemble Zookeeper, le quorum représente le nombre minimum d’instances nécessaires pour commiter une donnée dans 
  l’ensemble.

// Installation ----> https://www.codeflow.site/fr/article/how-to-install-and-configure-an-apache-zookeeper-cluster-on-ubuntu-18-04

// Parce que ZooKeeper conserve les données en mémoire pour atteindre un débit élevé et une latence faible, les systèmes de production
fonctionnent mieux avec 8 Go de RAM. Une quantité moindre de RAM peut entraîner un échange de machine virtuelle, ce qui peut 
entraîner une latence du serveur ZooKeeper. Une latence élevée du serveur ZooKeeper peut entraîner des problèmes tels que le 
dépassement de délai de session client qui pourrait avoir un impact négatif sur les fonctionnalités du système.

// ZooKeeper conserve toutes les données de configuration et d’état sur le disque afin qu’il puisse survivre au redémarrage.

// Les paramètres de configurations (dans le fichier /opt/zookeeper/conf):
  - tickTime : définit la longueur d’une tick en millisecondes.
  - dataDir : spécifie le répertoire utilisé pour stocker les instantanés de la base de données en mémoire et le journal des 
              transactions pour les mises à jour. On peut choisir un répertoire distinct pour les journaux de transactions.
  - clientPort : port utilisé pour écouter les connexions client.
  - maxClientCnxns : Limite le nombre maximal de connexions client.    

// Tester si zookeeper gère les brokers kafka:
$ /bin/zookeeper-shell.sh node4:2181 ls /brokers/ids
 
 Cette commande est équivalente à: 
 
$ /bin/zookeeper-shell.sh node4:2181
ls /        // la racine de "système de fichiers de zookeeper"
[admin, brokers, cluster, config, consumers, controller, controller_epoch, isr_change_notification, latest_producer_id_block, log_dir_event_notification, zookeeper]
ls /brokers
[ids, seqid, topics]
ls /brokers/ids
[0, 1, 2]
 
// Liste des topics (avec zookeeper shell):
$ /bin/zookeeper-shell.sh node4:2181 ls /brokers/topics
 
 
 
 
 
